/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BMathInterface extends ethers.utils.Interface {
  functions: {
    "BONE()": FunctionFragment;
    "BPOW_PRECISION()": FunctionFragment;
    "EXIT_FEE()": FunctionFragment;
    "INIT_POOL_SUPPLY()": FunctionFragment;
    "MAX_BOUND_TOKENS()": FunctionFragment;
    "MAX_BPOW_BASE()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "MAX_IN_RATIO()": FunctionFragment;
    "MAX_OUT_RATIO()": FunctionFragment;
    "MAX_TOTAL_WEIGHT()": FunctionFragment;
    "MAX_WEIGHT()": FunctionFragment;
    "MIN_BALANCE()": FunctionFragment;
    "MIN_BOUND_TOKENS()": FunctionFragment;
    "MIN_BPOW_BASE()": FunctionFragment;
    "MIN_FEE()": FunctionFragment;
    "MIN_WEIGHT()": FunctionFragment;
    "getColor()": FunctionFragment;
    "calcSpotPrice(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BPOW_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXIT_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "INIT_POOL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_IN_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OUT_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getColor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcSpotPrice",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutGivenIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInGivenOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolOutGivenSingleIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleInGivenPoolOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleOutGivenPoolIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolInGivenSingleOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "BONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BPOW_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXIT_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INIT_POOL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_IN_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OUT_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcInGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolOutGivenSingleIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleInGivenPoolOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleOutGivenPoolIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolInGivenSingleOut",
    data: BytesLike
  ): Result;

  events: {};
}

export class BMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BMathInterface;

  functions: {
    BONE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    BPOW_PRECISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    EXIT_FEE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    INIT_POOL_SUPPLY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_BOUND_TOKENS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_BPOW_BASE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_FEE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_IN_RATIO(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_OUT_RATIO(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_TOTAL_WEIGHT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_WEIGHT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_BALANCE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_BOUND_TOKENS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_BPOW_BASE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_FEE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_WEIGHT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getColor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * ******************************************************************************************** // calcSpotPrice                                                                             // // sP = spotPrice                                                                            // // bI = tokenBalanceIn                ( bI / wI )         1                                  // // bO = tokenBalanceOut         sP =  -----------  *  ----------                             // // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      spotPrice: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcOutGivenIn                                                                            // // aO = tokenAmountOut                                                                       // // bO = tokenBalanceOut                                                                      // // bI = tokenBalanceIn              /      /            bI             \    (wI / wO) \      // // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     // // wI = tokenWeightIn               \      \ ( bI + ( aI * ( 1 - sF )) /              /      // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountOut: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcInGivenOut                                                                            // // aI = tokenAmountIn                                                                        // // bO = tokenBalanceOut               /  /     bO      \    (wO / wI)      \                 // // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                // // aO = tokenAmountOut    aI =        \  \ ( bO - aO ) /                   /                 // // wI = tokenWeightIn           --------------------------------------------                 // // wO = tokenWeightOut                          ( 1 - sF )                                   // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountIn: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcPoolOutGivenSingleIn                                                                  // // pAo = poolAmountOut         /                                              \              // // tAi = tokenAmountIn        ///      /     //    wI \      \\       \     wI \             // // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \    --  \            // // tW = totalWeight     pAo=||  \      \     \\    tW /      //         | ^ tW   | * pS - pS // // tBi = tokenBalanceIn      \\  ------------------------------------- /        /            // // pS = poolSupply            \\                    tBi               /        /             // // sF = swapFee                \                                              /              //*********************************************************************************************
     */
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      poolAmountOut: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcSingleInGivenPoolOut                                                                  // // tAi = tokenAmountIn              //(pS + pAo)\     /    1    \\                           // // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                // // pAo = poolAmountOut              \\    pS    /     \(wI / tW)//                           // // bI = balanceIn          tAi =  --------------------------------------------               // // wI = weightIn                              /      wI  \                                   // // tW = totalWeight                          |  1 - ----  |  * sF                            // // sF = swapFee                               \      tW  /                                   //*********************************************************************************************
     */
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountIn: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcSingleOutGivenPoolIn                                                                  // // tAo = tokenAmountOut            /      /                                             \\   // // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \     /    1    \      \\  // // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || // // ps = poolSupply                \      \\          pS           /     \(wO / tW)/      //  // // wI = tokenWeightIn      tAo =   \      \                                             //   // // tW = totalWeight                    /     /      wO \       \                             // // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            // // eF = exitFee                        \     \      tW /       /                             //*********************************************************************************************
     */
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountOut: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcPoolInGivenSingleOut                                                                  // // pAi = poolAmountIn               // /               tAo             \\     / wO \     \   // // bO = tokenBalanceOut            // | bO - -------------------------- |\   | ---- |     \  // // tAo = tokenAmountOut      pS - ||   \     1 - ((1 - (tO / tW)) * sF)/  | ^ \ tW /  * pS | // // ps = poolSupply                 \\ -----------------------------------/                /  // // wO = tokenWeightOut  pAi =       \\               bO                 /                /   // // tW = totalWeight           -------------------------------------------------------------  // // sF = swapFee                                        ( 1 - eF )                            // // eF = exitFee                                                                              //*********************************************************************************************
     */
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      poolAmountIn: BigNumber;
      0: BigNumber;
    }>;
  };

  BONE(overrides?: CallOverrides): Promise<BigNumber>;

  BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  getColor(overrides?: CallOverrides): Promise<string>;

  /**
   * ******************************************************************************************** // calcSpotPrice                                                                             // // sP = spotPrice                                                                            // // bI = tokenBalanceIn                ( bI / wI )         1                                  // // bO = tokenBalanceOut         sP =  -----------  *  ----------                             // // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
   */
  calcSpotPrice(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcOutGivenIn                                                                            // // aO = tokenAmountOut                                                                       // // bO = tokenBalanceOut                                                                      // // bI = tokenBalanceIn              /      /            bI             \    (wI / wO) \      // // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     // // wI = tokenWeightIn               \      \ ( bI + ( aI * ( 1 - sF )) /              /      // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
   */
  calcOutGivenIn(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcInGivenOut                                                                            // // aI = tokenAmountIn                                                                        // // bO = tokenBalanceOut               /  /     bO      \    (wO / wI)      \                 // // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                // // aO = tokenAmountOut    aI =        \  \ ( bO - aO ) /                   /                 // // wI = tokenWeightIn           --------------------------------------------                 // // wO = tokenWeightOut                          ( 1 - sF )                                   // // sF = swapFee                                                                              //*********************************************************************************************
   */
  calcInGivenOut(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcPoolOutGivenSingleIn                                                                  // // pAo = poolAmountOut         /                                              \              // // tAi = tokenAmountIn        ///      /     //    wI \      \\       \     wI \             // // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \    --  \            // // tW = totalWeight     pAo=||  \      \     \\    tW /      //         | ^ tW   | * pS - pS // // tBi = tokenBalanceIn      \\  ------------------------------------- /        /            // // pS = poolSupply            \\                    tBi               /        /             // // sF = swapFee                \                                              /              //*********************************************************************************************
   */
  calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcSingleInGivenPoolOut                                                                  // // tAi = tokenAmountIn              //(pS + pAo)\     /    1    \\                           // // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                // // pAo = poolAmountOut              \\    pS    /     \(wI / tW)//                           // // bI = balanceIn          tAi =  --------------------------------------------               // // wI = weightIn                              /      wI  \                                   // // tW = totalWeight                          |  1 - ----  |  * sF                            // // sF = swapFee                               \      tW  /                                   //*********************************************************************************************
   */
  calcSingleInGivenPoolOut(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcSingleOutGivenPoolIn                                                                  // // tAo = tokenAmountOut            /      /                                             \\   // // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \     /    1    \      \\  // // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || // // ps = poolSupply                \      \\          pS           /     \(wO / tW)/      //  // // wI = tokenWeightIn      tAo =   \      \                                             //   // // tW = totalWeight                    /     /      wO \       \                             // // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            // // eF = exitFee                        \     \      tW /       /                             //*********************************************************************************************
   */
  calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcPoolInGivenSingleOut                                                                  // // pAi = poolAmountIn               // /               tAo             \\     / wO \     \   // // bO = tokenBalanceOut            // | bO - -------------------------- |\   | ---- |     \  // // tAo = tokenAmountOut      pS - ||   \     1 - ((1 - (tO / tW)) * sF)/  | ^ \ tW /  * pS | // // ps = poolSupply                 \\ -----------------------------------/                /  // // wO = tokenWeightOut  pAi =       \\               bO                 /                /   // // tW = totalWeight           -------------------------------------------------------------  // // sF = swapFee                                        ( 1 - eF )                            // // eF = exitFee                                                                              //*********************************************************************************************
   */
  calcPoolInGivenSingleOut(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BONE(overrides?: CallOverrides): Promise<BigNumber>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    getColor(overrides?: CallOverrides): Promise<string>;

    /**
     * ******************************************************************************************** // calcSpotPrice                                                                             // // sP = spotPrice                                                                            // // bI = tokenBalanceIn                ( bI / wI )         1                                  // // bO = tokenBalanceOut         sP =  -----------  *  ----------                             // // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcOutGivenIn                                                                            // // aO = tokenAmountOut                                                                       // // bO = tokenBalanceOut                                                                      // // bI = tokenBalanceIn              /      /            bI             \    (wI / wO) \      // // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     // // wI = tokenWeightIn               \      \ ( bI + ( aI * ( 1 - sF )) /              /      // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcInGivenOut                                                                            // // aI = tokenAmountIn                                                                        // // bO = tokenBalanceOut               /  /     bO      \    (wO / wI)      \                 // // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                // // aO = tokenAmountOut    aI =        \  \ ( bO - aO ) /                   /                 // // wI = tokenWeightIn           --------------------------------------------                 // // wO = tokenWeightOut                          ( 1 - sF )                                   // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcPoolOutGivenSingleIn                                                                  // // pAo = poolAmountOut         /                                              \              // // tAi = tokenAmountIn        ///      /     //    wI \      \\       \     wI \             // // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \    --  \            // // tW = totalWeight     pAo=||  \      \     \\    tW /      //         | ^ tW   | * pS - pS // // tBi = tokenBalanceIn      \\  ------------------------------------- /        /            // // pS = poolSupply            \\                    tBi               /        /             // // sF = swapFee                \                                              /              //*********************************************************************************************
     */
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcSingleInGivenPoolOut                                                                  // // tAi = tokenAmountIn              //(pS + pAo)\     /    1    \\                           // // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                // // pAo = poolAmountOut              \\    pS    /     \(wI / tW)//                           // // bI = balanceIn          tAi =  --------------------------------------------               // // wI = weightIn                              /      wI  \                                   // // tW = totalWeight                          |  1 - ----  |  * sF                            // // sF = swapFee                               \      tW  /                                   //*********************************************************************************************
     */
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcSingleOutGivenPoolIn                                                                  // // tAo = tokenAmountOut            /      /                                             \\   // // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \     /    1    \      \\  // // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || // // ps = poolSupply                \      \\          pS           /     \(wO / tW)/      //  // // wI = tokenWeightIn      tAo =   \      \                                             //   // // tW = totalWeight                    /     /      wO \       \                             // // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            // // eF = exitFee                        \     \      tW /       /                             //*********************************************************************************************
     */
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcPoolInGivenSingleOut                                                                  // // pAi = poolAmountIn               // /               tAo             \\     / wO \     \   // // bO = tokenBalanceOut            // | bO - -------------------------- |\   | ---- |     \  // // tAo = tokenAmountOut      pS - ||   \     1 - ((1 - (tO / tW)) * sF)/  | ^ \ tW /  * pS | // // ps = poolSupply                 \\ -----------------------------------/                /  // // wO = tokenWeightOut  pAi =       \\               bO                 /                /   // // tW = totalWeight           -------------------------------------------------------------  // // sF = swapFee                                        ( 1 - eF )                            // // eF = exitFee                                                                              //*********************************************************************************************
     */
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BONE(): Promise<BigNumber>;
    BPOW_PRECISION(): Promise<BigNumber>;
    EXIT_FEE(): Promise<BigNumber>;
    INIT_POOL_SUPPLY(): Promise<BigNumber>;
    MAX_BOUND_TOKENS(): Promise<BigNumber>;
    MAX_BPOW_BASE(): Promise<BigNumber>;
    MAX_FEE(): Promise<BigNumber>;
    MAX_IN_RATIO(): Promise<BigNumber>;
    MAX_OUT_RATIO(): Promise<BigNumber>;
    MAX_TOTAL_WEIGHT(): Promise<BigNumber>;
    MAX_WEIGHT(): Promise<BigNumber>;
    MIN_BALANCE(): Promise<BigNumber>;
    MIN_BOUND_TOKENS(): Promise<BigNumber>;
    MIN_BPOW_BASE(): Promise<BigNumber>;
    MIN_FEE(): Promise<BigNumber>;
    MIN_WEIGHT(): Promise<BigNumber>;
    getColor(): Promise<BigNumber>;
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BONE(): Promise<PopulatedTransaction>;
    BPOW_PRECISION(): Promise<PopulatedTransaction>;
    EXIT_FEE(): Promise<PopulatedTransaction>;
    INIT_POOL_SUPPLY(): Promise<PopulatedTransaction>;
    MAX_BOUND_TOKENS(): Promise<PopulatedTransaction>;
    MAX_BPOW_BASE(): Promise<PopulatedTransaction>;
    MAX_FEE(): Promise<PopulatedTransaction>;
    MAX_IN_RATIO(): Promise<PopulatedTransaction>;
    MAX_OUT_RATIO(): Promise<PopulatedTransaction>;
    MAX_TOTAL_WEIGHT(): Promise<PopulatedTransaction>;
    MAX_WEIGHT(): Promise<PopulatedTransaction>;
    MIN_BALANCE(): Promise<PopulatedTransaction>;
    MIN_BOUND_TOKENS(): Promise<PopulatedTransaction>;
    MIN_BPOW_BASE(): Promise<PopulatedTransaction>;
    MIN_FEE(): Promise<PopulatedTransaction>;
    MIN_WEIGHT(): Promise<PopulatedTransaction>;
    getColor(): Promise<PopulatedTransaction>;
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
