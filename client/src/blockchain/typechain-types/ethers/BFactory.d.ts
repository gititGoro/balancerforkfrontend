/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BFactoryInterface extends ethers.utils.Interface {
  functions: {
    "getColor()": FunctionFragment;
    "isBPool(address)": FunctionFragment;
    "newBPool()": FunctionFragment;
    "getBLabs()": FunctionFragment;
    "setBLabs(address)": FunctionFragment;
    "collect(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getColor", values?: undefined): string;
  encodeFunctionData(functionFragment: "isBPool", values: [string]): string;
  encodeFunctionData(functionFragment: "newBPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBLabs", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBLabs", values: [string]): string;
  encodeFunctionData(functionFragment: "collect", values: [string]): string;

  decodeFunctionResult(functionFragment: "getColor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBLabs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBLabs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;

  events: {
    "LOG_BLABS(address,address)": EventFragment;
    "LOG_NEW_POOL(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LOG_BLABS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_NEW_POOL"): EventFragment;
}

export class BFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BFactoryInterface;

  functions: {
    getColor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isBPool(
      b: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    newBPool(overrides?: Overrides): Promise<ContractTransaction>;

    getBLabs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setBLabs(b: string, overrides?: Overrides): Promise<ContractTransaction>;

    collect(pool: string, overrides?: Overrides): Promise<ContractTransaction>;
  };

  getColor(overrides?: CallOverrides): Promise<string>;

  isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

  newBPool(overrides?: Overrides): Promise<ContractTransaction>;

  getBLabs(overrides?: CallOverrides): Promise<string>;

  setBLabs(b: string, overrides?: Overrides): Promise<ContractTransaction>;

  collect(pool: string, overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    getColor(overrides?: CallOverrides): Promise<string>;

    isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

    newBPool(overrides?: Overrides): Promise<string>;

    getBLabs(overrides?: CallOverrides): Promise<string>;

    setBLabs(b: string, overrides?: Overrides): Promise<void>;

    collect(pool: string, overrides?: Overrides): Promise<void>;
  };

  filters: {
    LOG_BLABS(caller: string | null, blabs: string | null): EventFilter;

    LOG_NEW_POOL(caller: string | null, pool: string | null): EventFilter;
  };

  estimateGas: {
    getColor(): Promise<BigNumber>;
    isBPool(b: string): Promise<BigNumber>;
    newBPool(): Promise<BigNumber>;
    getBLabs(): Promise<BigNumber>;
    setBLabs(b: string): Promise<BigNumber>;
    collect(pool: string): Promise<BigNumber>;
  };

  populateTransaction: {
    getColor(): Promise<PopulatedTransaction>;
    isBPool(b: string): Promise<PopulatedTransaction>;
    newBPool(): Promise<PopulatedTransaction>;
    getBLabs(): Promise<PopulatedTransaction>;
    setBLabs(b: string): Promise<PopulatedTransaction>;
    collect(pool: string): Promise<PopulatedTransaction>;
  };
}
