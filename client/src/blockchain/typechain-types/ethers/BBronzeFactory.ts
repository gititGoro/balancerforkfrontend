/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { BBronze } from "./BBronze";

export class BBronzeFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<BBronze> {
    return super.deploy(overrides || {}) as Promise<BBronze>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BBronze {
    return super.attach(address) as BBronze;
  }
  connect(signer: Signer): BBronzeFactory {
    return super.connect(signer) as BBronzeFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BBronze {
    return new Contract(address, _abi, signerOrProvider) as BBronze;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "getColor",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ba8061001e6000396000f3fe6080604052348015600f57600080fd5b50600436106044577c010000000000000000000000000000000000000000000000000000000060003504639a86139b81146049575b600080fd5b604f6061565b60408051918252519081900360200190f35b7f42524f4e5a4500000000000000000000000000000000000000000000000000009056fea265627a7a723158207f2ba8afdc0935d80fd62d6797e092bc504bdf14854f7afd5bda464eef2f3f2164736f6c634300050c0032";
