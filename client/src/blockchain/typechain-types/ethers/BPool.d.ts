/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BPoolInterface extends ethers.utils.Interface {
  functions: {
    "BONE()": FunctionFragment;
    "BPOW_PRECISION()": FunctionFragment;
    "EXIT_FEE()": FunctionFragment;
    "INIT_POOL_SUPPLY()": FunctionFragment;
    "MAX_BOUND_TOKENS()": FunctionFragment;
    "MAX_BPOW_BASE()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "MAX_IN_RATIO()": FunctionFragment;
    "MAX_OUT_RATIO()": FunctionFragment;
    "MAX_TOTAL_WEIGHT()": FunctionFragment;
    "MAX_WEIGHT()": FunctionFragment;
    "MIN_BALANCE()": FunctionFragment;
    "MIN_BOUND_TOKENS()": FunctionFragment;
    "MIN_BPOW_BASE()": FunctionFragment;
    "MIN_FEE()": FunctionFragment;
    "MIN_WEIGHT()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSpotPrice(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "getColor()": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "isPublicSwap()": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "isBound(address)": FunctionFragment;
    "getNumTokens()": FunctionFragment;
    "getCurrentTokens()": FunctionFragment;
    "getFinalTokens()": FunctionFragment;
    "getDenormalizedWeight(address)": FunctionFragment;
    "getTotalDenormalizedWeight()": FunctionFragment;
    "getNormalizedWeight(address)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getSwapFee()": FunctionFragment;
    "getController()": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setPublicSwap(bool)": FunctionFragment;
    "finalize()": FunctionFragment;
    "bind(address,uint256,uint256)": FunctionFragment;
    "rebind(address,uint256,uint256)": FunctionFragment;
    "unbind(address)": FunctionFragment;
    "gulp(address)": FunctionFragment;
    "getSpotPrice(address,address)": FunctionFragment;
    "getSpotPriceSansFee(address,address)": FunctionFragment;
    "joinPool(uint256,uint256[])": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "swapExactAmountIn(address,uint256,address,uint256,uint256)": FunctionFragment;
    "swapExactAmountOut(address,uint256,address,uint256,uint256)": FunctionFragment;
    "joinswapExternAmountIn(address,uint256,uint256)": FunctionFragment;
    "joinswapPoolAmountOut(address,uint256,uint256)": FunctionFragment;
    "exitswapPoolAmountIn(address,uint256,uint256)": FunctionFragment;
    "exitswapExternAmountOut(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BPOW_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXIT_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "INIT_POOL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_IN_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OUT_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcInGivenOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutGivenIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolInGivenSingleOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolOutGivenSingleIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleInGivenPoolOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleOutGivenPoolIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSpotPrice",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getColor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isBound", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNumTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDenormalizedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeight",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSwap",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bind",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebind",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unbind", values: [string]): string;
  encodeFunctionData(functionFragment: "gulp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPriceSansFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountIn",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountOut",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapPoolAmountOut",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapExternAmountOut",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BPOW_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXIT_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INIT_POOL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_IN_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OUT_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolInGivenSingleOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolOutGivenSingleIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleInGivenPoolOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleOutGivenPoolIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getColor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gulp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPriceSansFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapPoolAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapExternAmountOut",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "LOG_CALL(bytes4,address,bytes)": EventFragment;
    "LOG_EXIT(address,address,uint256)": EventFragment;
    "LOG_JOIN(address,address,uint256)": EventFragment;
    "LOG_SWAP(address,address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_CALL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_EXIT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_JOIN"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_SWAP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class BPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BPoolInterface;

  functions: {
    BONE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    BPOW_PRECISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    EXIT_FEE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    INIT_POOL_SUPPLY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_BOUND_TOKENS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_BPOW_BASE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_FEE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_IN_RATIO(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_OUT_RATIO(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_TOTAL_WEIGHT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_WEIGHT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_BALANCE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_BOUND_TOKENS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_BPOW_BASE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_FEE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_WEIGHT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      whom: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcInGivenOut                                                                            // // aI = tokenAmountIn                                                                        // // bO = tokenBalanceOut               /  /     bO      \    (wO / wI)      \                 // // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                // // aO = tokenAmountOut    aI =        \  \ ( bO - aO ) /                   /                 // // wI = tokenWeightIn           --------------------------------------------                 // // wO = tokenWeightOut                          ( 1 - sF )                                   // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountIn: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcOutGivenIn                                                                            // // aO = tokenAmountOut                                                                       // // bO = tokenBalanceOut                                                                      // // bI = tokenBalanceIn              /      /            bI             \    (wI / wO) \      // // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     // // wI = tokenWeightIn               \      \ ( bI + ( aI * ( 1 - sF )) /              /      // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountOut: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcPoolInGivenSingleOut                                                                  // // pAi = poolAmountIn               // /               tAo             \\     / wO \     \   // // bO = tokenBalanceOut            // | bO - -------------------------- |\   | ---- |     \  // // tAo = tokenAmountOut      pS - ||   \     1 - ((1 - (tO / tW)) * sF)/  | ^ \ tW /  * pS | // // ps = poolSupply                 \\ -----------------------------------/                /  // // wO = tokenWeightOut  pAi =       \\               bO                 /                /   // // tW = totalWeight           -------------------------------------------------------------  // // sF = swapFee                                        ( 1 - eF )                            // // eF = exitFee                                                                              //*********************************************************************************************
     */
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      poolAmountIn: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcPoolOutGivenSingleIn                                                                  // // pAo = poolAmountOut         /                                              \              // // tAi = tokenAmountIn        ///      /     //    wI \      \\       \     wI \             // // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \    --  \            // // tW = totalWeight     pAo=||  \      \     \\    tW /      //         | ^ tW   | * pS - pS // // tBi = tokenBalanceIn      \\  ------------------------------------- /        /            // // pS = poolSupply            \\                    tBi               /        /             // // sF = swapFee                \                                              /              //*********************************************************************************************
     */
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      poolAmountOut: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcSingleInGivenPoolOut                                                                  // // tAi = tokenAmountIn              //(pS + pAo)\     /    1    \\                           // // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                // // pAo = poolAmountOut              \\    pS    /     \(wI / tW)//                           // // bI = balanceIn          tAi =  --------------------------------------------               // // wI = weightIn                              /      wI  \                                   // // tW = totalWeight                          |  1 - ----  |  * sF                            // // sF = swapFee                               \      tW  /                                   //*********************************************************************************************
     */
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountIn: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcSingleOutGivenPoolIn                                                                  // // tAo = tokenAmountOut            /      /                                             \\   // // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \     /    1    \      \\  // // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || // // ps = poolSupply                \      \\          pS           /     \(wO / tW)/      //  // // wI = tokenWeightIn      tAo =   \      \                                             //   // // tW = totalWeight                    /     /      wO \       \                             // // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            // // eF = exitFee                        \     \      tW /       /                             //*********************************************************************************************
     */
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountOut: BigNumber;
      0: BigNumber;
    }>;

    /**
     * ******************************************************************************************** // calcSpotPrice                                                                             // // sP = spotPrice                                                                            // // bI = tokenBalanceIn                ( bI / wI )         1                                  // // bO = tokenBalanceOut         sP =  -----------  *  ----------                             // // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      spotPrice: BigNumber;
      0: BigNumber;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getColor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    increaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPublicSwap(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isFinalized(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isBound(
      t: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getNumTokens(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCurrentTokens(
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    getFinalTokens(
      overrides?: CallOverrides
    ): Promise<{
      tokens: string[];
      0: string[];
    }>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalDenormalizedWeight(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getNormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSwapFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getController(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setController(
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPublicSwap(
      public_: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unbind(token: string, overrides?: Overrides): Promise<ContractTransaction>;

    gulp(token: string, overrides?: Overrides): Promise<ContractTransaction>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<{
      spotPrice: BigNumber;
      0: BigNumber;
    }>;

    getSpotPriceSansFee(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<{
      spotPrice: BigNumber;
      0: BigNumber;
    }>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactAmountOut(
      tokenIn: string,
      maxAmountIn: BigNumberish,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  BONE(overrides?: CallOverrides): Promise<BigNumber>;

  BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    src: string,
    dst: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(whom: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcInGivenOut                                                                            // // aI = tokenAmountIn                                                                        // // bO = tokenBalanceOut               /  /     bO      \    (wO / wI)      \                 // // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                // // aO = tokenAmountOut    aI =        \  \ ( bO - aO ) /                   /                 // // wI = tokenWeightIn           --------------------------------------------                 // // wO = tokenWeightOut                          ( 1 - sF )                                   // // sF = swapFee                                                                              //*********************************************************************************************
   */
  calcInGivenOut(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcOutGivenIn                                                                            // // aO = tokenAmountOut                                                                       // // bO = tokenBalanceOut                                                                      // // bI = tokenBalanceIn              /      /            bI             \    (wI / wO) \      // // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     // // wI = tokenWeightIn               \      \ ( bI + ( aI * ( 1 - sF )) /              /      // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
   */
  calcOutGivenIn(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcPoolInGivenSingleOut                                                                  // // pAi = poolAmountIn               // /               tAo             \\     / wO \     \   // // bO = tokenBalanceOut            // | bO - -------------------------- |\   | ---- |     \  // // tAo = tokenAmountOut      pS - ||   \     1 - ((1 - (tO / tW)) * sF)/  | ^ \ tW /  * pS | // // ps = poolSupply                 \\ -----------------------------------/                /  // // wO = tokenWeightOut  pAi =       \\               bO                 /                /   // // tW = totalWeight           -------------------------------------------------------------  // // sF = swapFee                                        ( 1 - eF )                            // // eF = exitFee                                                                              //*********************************************************************************************
   */
  calcPoolInGivenSingleOut(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcPoolOutGivenSingleIn                                                                  // // pAo = poolAmountOut         /                                              \              // // tAi = tokenAmountIn        ///      /     //    wI \      \\       \     wI \             // // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \    --  \            // // tW = totalWeight     pAo=||  \      \     \\    tW /      //         | ^ tW   | * pS - pS // // tBi = tokenBalanceIn      \\  ------------------------------------- /        /            // // pS = poolSupply            \\                    tBi               /        /             // // sF = swapFee                \                                              /              //*********************************************************************************************
   */
  calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcSingleInGivenPoolOut                                                                  // // tAi = tokenAmountIn              //(pS + pAo)\     /    1    \\                           // // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                // // pAo = poolAmountOut              \\    pS    /     \(wI / tW)//                           // // bI = balanceIn          tAi =  --------------------------------------------               // // wI = weightIn                              /      wI  \                                   // // tW = totalWeight                          |  1 - ----  |  * sF                            // // sF = swapFee                               \      tW  /                                   //*********************************************************************************************
   */
  calcSingleInGivenPoolOut(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcSingleOutGivenPoolIn                                                                  // // tAo = tokenAmountOut            /      /                                             \\   // // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \     /    1    \      \\  // // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || // // ps = poolSupply                \      \\          pS           /     \(wO / tW)/      //  // // wI = tokenWeightIn      tAo =   \      \                                             //   // // tW = totalWeight                    /     /      wO \       \                             // // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            // // eF = exitFee                        \     \      tW /       /                             //*********************************************************************************************
   */
  calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * ******************************************************************************************** // calcSpotPrice                                                                             // // sP = spotPrice                                                                            // // bI = tokenBalanceIn                ( bI / wI )         1                                  // // bO = tokenBalanceOut         sP =  -----------  *  ----------                             // // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
   */
  calcSpotPrice(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseApproval(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getColor(overrides?: CallOverrides): Promise<string>;

  increaseApproval(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

  getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

  getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

  getDenormalizedWeight(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  getNormalizedWeight(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  getController(overrides?: CallOverrides): Promise<string>;

  setSwapFee(
    swapFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setController(
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPublicSwap(
    public_: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  bind(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rebind(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unbind(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  gulp(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  getSpotPrice(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpotPriceSansFee(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  joinPool(
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPool(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactAmountIn(
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    tokenOut: string,
    minAmountOut: BigNumberish,
    maxPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactAmountOut(
    tokenIn: string,
    maxAmountIn: BigNumberish,
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    maxPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinswapPoolAmountOut(
    tokenIn: string,
    poolAmountOut: BigNumberish,
    maxAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    tokenOut: string,
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitswapExternAmountOut(
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    maxPoolAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    BONE(overrides?: CallOverrides): Promise<BigNumber>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    balanceOf(whom: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcInGivenOut                                                                            // // aI = tokenAmountIn                                                                        // // bO = tokenBalanceOut               /  /     bO      \    (wO / wI)      \                 // // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                // // aO = tokenAmountOut    aI =        \  \ ( bO - aO ) /                   /                 // // wI = tokenWeightIn           --------------------------------------------                 // // wO = tokenWeightOut                          ( 1 - sF )                                   // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcOutGivenIn                                                                            // // aO = tokenAmountOut                                                                       // // bO = tokenBalanceOut                                                                      // // bI = tokenBalanceIn              /      /            bI             \    (wI / wO) \      // // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     // // wI = tokenWeightIn               \      \ ( bI + ( aI * ( 1 - sF )) /              /      // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcPoolInGivenSingleOut                                                                  // // pAi = poolAmountIn               // /               tAo             \\     / wO \     \   // // bO = tokenBalanceOut            // | bO - -------------------------- |\   | ---- |     \  // // tAo = tokenAmountOut      pS - ||   \     1 - ((1 - (tO / tW)) * sF)/  | ^ \ tW /  * pS | // // ps = poolSupply                 \\ -----------------------------------/                /  // // wO = tokenWeightOut  pAi =       \\               bO                 /                /   // // tW = totalWeight           -------------------------------------------------------------  // // sF = swapFee                                        ( 1 - eF )                            // // eF = exitFee                                                                              //*********************************************************************************************
     */
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcPoolOutGivenSingleIn                                                                  // // pAo = poolAmountOut         /                                              \              // // tAi = tokenAmountIn        ///      /     //    wI \      \\       \     wI \             // // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \    --  \            // // tW = totalWeight     pAo=||  \      \     \\    tW /      //         | ^ tW   | * pS - pS // // tBi = tokenBalanceIn      \\  ------------------------------------- /        /            // // pS = poolSupply            \\                    tBi               /        /             // // sF = swapFee                \                                              /              //*********************************************************************************************
     */
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcSingleInGivenPoolOut                                                                  // // tAi = tokenAmountIn              //(pS + pAo)\     /    1    \\                           // // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                // // pAo = poolAmountOut              \\    pS    /     \(wI / tW)//                           // // bI = balanceIn          tAi =  --------------------------------------------               // // wI = weightIn                              /      wI  \                                   // // tW = totalWeight                          |  1 - ----  |  * sF                            // // sF = swapFee                               \      tW  /                                   //*********************************************************************************************
     */
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcSingleOutGivenPoolIn                                                                  // // tAo = tokenAmountOut            /      /                                             \\   // // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \     /    1    \      \\  // // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || // // ps = poolSupply                \      \\          pS           /     \(wO / tW)/      //  // // wI = tokenWeightIn      tAo =   \      \                                             //   // // tW = totalWeight                    /     /      wO \       \                             // // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            // // eF = exitFee                        \     \      tW /       /                             //*********************************************************************************************
     */
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ******************************************************************************************** // calcSpotPrice                                                                             // // sP = spotPrice                                                                            // // bI = tokenBalanceIn                ( bI / wI )         1                                  // // bO = tokenBalanceOut         sP =  -----------  *  ----------                             // // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             // // wO = tokenWeightOut                                                                       // // sF = swapFee                                                                              //*********************************************************************************************
     */
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    getColor(overrides?: CallOverrides): Promise<string>;

    increaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

    getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

    getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<string>;

    setSwapFee(swapFee: BigNumberish, overrides?: Overrides): Promise<void>;

    setController(manager: string, overrides?: Overrides): Promise<void>;

    setPublicSwap(public_: boolean, overrides?: Overrides): Promise<void>;

    finalize(overrides?: Overrides): Promise<void>;

    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    unbind(token: string, overrides?: Overrides): Promise<void>;

    gulp(token: string, overrides?: Overrides): Promise<void>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceSansFee(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<void>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<void>;

    swapExactAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<{
      tokenAmountOut: BigNumber;
      spotPriceAfter: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    swapExactAmountOut(
      tokenIn: string,
      maxAmountIn: BigNumberish,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<{
      tokenAmountIn: BigNumber;
      spotPriceAfter: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(src: string | null, dst: string | null, amt: null): EventFilter;

    LOG_CALL(
      sig: BytesLike | null,
      caller: string | null,
      data: null
    ): EventFilter;

    LOG_EXIT(
      caller: string | null,
      tokenOut: string | null,
      tokenAmountOut: null
    ): EventFilter;

    LOG_JOIN(
      caller: string | null,
      tokenIn: string | null,
      tokenAmountIn: null
    ): EventFilter;

    LOG_SWAP(
      caller: string | null,
      tokenIn: string | null,
      tokenOut: string | null,
      tokenAmountIn: null,
      tokenAmountOut: null
    ): EventFilter;

    Transfer(src: string | null, dst: string | null, amt: null): EventFilter;
  };

  estimateGas: {
    BONE(): Promise<BigNumber>;
    BPOW_PRECISION(): Promise<BigNumber>;
    EXIT_FEE(): Promise<BigNumber>;
    INIT_POOL_SUPPLY(): Promise<BigNumber>;
    MAX_BOUND_TOKENS(): Promise<BigNumber>;
    MAX_BPOW_BASE(): Promise<BigNumber>;
    MAX_FEE(): Promise<BigNumber>;
    MAX_IN_RATIO(): Promise<BigNumber>;
    MAX_OUT_RATIO(): Promise<BigNumber>;
    MAX_TOTAL_WEIGHT(): Promise<BigNumber>;
    MAX_WEIGHT(): Promise<BigNumber>;
    MIN_BALANCE(): Promise<BigNumber>;
    MIN_BOUND_TOKENS(): Promise<BigNumber>;
    MIN_BPOW_BASE(): Promise<BigNumber>;
    MIN_FEE(): Promise<BigNumber>;
    MIN_WEIGHT(): Promise<BigNumber>;
    allowance(src: string, dst: string): Promise<BigNumber>;
    approve(dst: string, amt: BigNumberish): Promise<BigNumber>;
    balanceOf(whom: string): Promise<BigNumber>;
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
    decimals(): Promise<BigNumber>;
    decreaseApproval(dst: string, amt: BigNumberish): Promise<BigNumber>;
    getColor(): Promise<BigNumber>;
    increaseApproval(dst: string, amt: BigNumberish): Promise<BigNumber>;
    name(): Promise<BigNumber>;
    symbol(): Promise<BigNumber>;
    totalSupply(): Promise<BigNumber>;
    transfer(dst: string, amt: BigNumberish): Promise<BigNumber>;
    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish
    ): Promise<BigNumber>;
    isPublicSwap(): Promise<BigNumber>;
    isFinalized(): Promise<BigNumber>;
    isBound(t: string): Promise<BigNumber>;
    getNumTokens(): Promise<BigNumber>;
    getCurrentTokens(): Promise<BigNumber>;
    getFinalTokens(): Promise<BigNumber>;
    getDenormalizedWeight(token: string): Promise<BigNumber>;
    getTotalDenormalizedWeight(): Promise<BigNumber>;
    getNormalizedWeight(token: string): Promise<BigNumber>;
    getBalance(token: string): Promise<BigNumber>;
    getSwapFee(): Promise<BigNumber>;
    getController(): Promise<BigNumber>;
    setSwapFee(swapFee: BigNumberish): Promise<BigNumber>;
    setController(manager: string): Promise<BigNumber>;
    setPublicSwap(public_: boolean): Promise<BigNumber>;
    finalize(): Promise<BigNumber>;
    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish
    ): Promise<BigNumber>;
    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish
    ): Promise<BigNumber>;
    unbind(token: string): Promise<BigNumber>;
    gulp(token: string): Promise<BigNumber>;
    getSpotPrice(tokenIn: string, tokenOut: string): Promise<BigNumber>;
    getSpotPriceSansFee(tokenIn: string, tokenOut: string): Promise<BigNumber>;
    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[]
    ): Promise<BigNumber>;
    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[]
    ): Promise<BigNumber>;
    swapExactAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      maxPrice: BigNumberish
    ): Promise<BigNumber>;
    swapExactAmountOut(
      tokenIn: string,
      maxAmountIn: BigNumberish,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPrice: BigNumberish
    ): Promise<BigNumber>;
    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish
    ): Promise<BigNumber>;
    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish
    ): Promise<BigNumber>;
    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish
    ): Promise<BigNumber>;
    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BONE(): Promise<PopulatedTransaction>;
    BPOW_PRECISION(): Promise<PopulatedTransaction>;
    EXIT_FEE(): Promise<PopulatedTransaction>;
    INIT_POOL_SUPPLY(): Promise<PopulatedTransaction>;
    MAX_BOUND_TOKENS(): Promise<PopulatedTransaction>;
    MAX_BPOW_BASE(): Promise<PopulatedTransaction>;
    MAX_FEE(): Promise<PopulatedTransaction>;
    MAX_IN_RATIO(): Promise<PopulatedTransaction>;
    MAX_OUT_RATIO(): Promise<PopulatedTransaction>;
    MAX_TOTAL_WEIGHT(): Promise<PopulatedTransaction>;
    MAX_WEIGHT(): Promise<PopulatedTransaction>;
    MIN_BALANCE(): Promise<PopulatedTransaction>;
    MIN_BOUND_TOKENS(): Promise<PopulatedTransaction>;
    MIN_BPOW_BASE(): Promise<PopulatedTransaction>;
    MIN_FEE(): Promise<PopulatedTransaction>;
    MIN_WEIGHT(): Promise<PopulatedTransaction>;
    allowance(src: string, dst: string): Promise<PopulatedTransaction>;
    approve(dst: string, amt: BigNumberish): Promise<PopulatedTransaction>;
    balanceOf(whom: string): Promise<PopulatedTransaction>;
    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    decimals(): Promise<PopulatedTransaction>;
    decreaseApproval(
      dst: string,
      amt: BigNumberish
    ): Promise<PopulatedTransaction>;
    getColor(): Promise<PopulatedTransaction>;
    increaseApproval(
      dst: string,
      amt: BigNumberish
    ): Promise<PopulatedTransaction>;
    name(): Promise<PopulatedTransaction>;
    symbol(): Promise<PopulatedTransaction>;
    totalSupply(): Promise<PopulatedTransaction>;
    transfer(dst: string, amt: BigNumberish): Promise<PopulatedTransaction>;
    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish
    ): Promise<PopulatedTransaction>;
    isPublicSwap(): Promise<PopulatedTransaction>;
    isFinalized(): Promise<PopulatedTransaction>;
    isBound(t: string): Promise<PopulatedTransaction>;
    getNumTokens(): Promise<PopulatedTransaction>;
    getCurrentTokens(): Promise<PopulatedTransaction>;
    getFinalTokens(): Promise<PopulatedTransaction>;
    getDenormalizedWeight(token: string): Promise<PopulatedTransaction>;
    getTotalDenormalizedWeight(): Promise<PopulatedTransaction>;
    getNormalizedWeight(token: string): Promise<PopulatedTransaction>;
    getBalance(token: string): Promise<PopulatedTransaction>;
    getSwapFee(): Promise<PopulatedTransaction>;
    getController(): Promise<PopulatedTransaction>;
    setSwapFee(swapFee: BigNumberish): Promise<PopulatedTransaction>;
    setController(manager: string): Promise<PopulatedTransaction>;
    setPublicSwap(public_: boolean): Promise<PopulatedTransaction>;
    finalize(): Promise<PopulatedTransaction>;
    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish
    ): Promise<PopulatedTransaction>;
    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish
    ): Promise<PopulatedTransaction>;
    unbind(token: string): Promise<PopulatedTransaction>;
    gulp(token: string): Promise<PopulatedTransaction>;
    getSpotPrice(
      tokenIn: string,
      tokenOut: string
    ): Promise<PopulatedTransaction>;
    getSpotPriceSansFee(
      tokenIn: string,
      tokenOut: string
    ): Promise<PopulatedTransaction>;
    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[]
    ): Promise<PopulatedTransaction>;
    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[]
    ): Promise<PopulatedTransaction>;
    swapExactAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      maxPrice: BigNumberish
    ): Promise<PopulatedTransaction>;
    swapExactAmountOut(
      tokenIn: string,
      maxAmountIn: BigNumberish,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPrice: BigNumberish
    ): Promise<PopulatedTransaction>;
    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish
    ): Promise<PopulatedTransaction>;
    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish
    ): Promise<PopulatedTransaction>;
    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish
    ): Promise<PopulatedTransaction>;
    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
