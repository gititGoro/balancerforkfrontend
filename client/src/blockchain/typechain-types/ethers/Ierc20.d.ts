/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface Ierc20Interface extends ethers.utils.Interface {
  functions: {
    "totalSupply()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Ierc20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Ierc20Interface;

  functions: {
    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      whom: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(whom: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    src: string,
    dst: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(whom: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(src: string | null, dst: string | null, amt: null): EventFilter;

    Transfer(src: string | null, dst: string | null, amt: null): EventFilter;
  };

  estimateGas: {
    totalSupply(): Promise<BigNumber>;
    balanceOf(whom: string): Promise<BigNumber>;
    allowance(src: string, dst: string): Promise<BigNumber>;
    approve(dst: string, amt: BigNumberish): Promise<BigNumber>;
    transfer(dst: string, amt: BigNumberish): Promise<BigNumber>;
    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    totalSupply(): Promise<PopulatedTransaction>;
    balanceOf(whom: string): Promise<PopulatedTransaction>;
    allowance(src: string, dst: string): Promise<PopulatedTransaction>;
    approve(dst: string, amt: BigNumberish): Promise<PopulatedTransaction>;
    transfer(dst: string, amt: BigNumberish): Promise<PopulatedTransaction>;
    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
